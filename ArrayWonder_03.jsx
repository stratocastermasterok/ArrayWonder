/*Copyright 2018 Tomilola AdewaleLicensed under the Apache License, Version 2.0 (the "License");you may not use this file except in compliance with the License.You may obtain a copy of the License at    http://www.apache.org/licenses/LICENSE-2.0Unless required by applicable law or agreed to in writing, softwaredistributed under the License is distributed on an "AS IS" BASIS,WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.See the License for the specific language governing permissions andlimitations under the License.*/ {        function selected_rbutton (rbuttons)    {    for (var i = 0; i < rbuttons.children.length; i++)    if (rbuttons.children[i].value == true)    return i;    }function myScript(thisObj) {          function myScript_buildUI(thisObj) {                    var myPanel = (thisObj instanceof Panel) ? thisObj : new Window("palette", "ArrAYEE!", [0, 0, 220, 200]);function myFocusFunction(){if (this.text ===this.text) {this.text=""}    }function myBlurFunction(){if (this.text ==="") {this.text=this.text}    }         var pan1_01 = myPanel.add ("panel");        var pan1_02 = myPanel.add ("panel");        var pan1_03 = myPanel.add ("panel");        var pan1_04 = myPanel.add ("panel");           myPanel.alignChildren = "fill";     pan1_01.alignChildren = "fill";pan1_02.alignChildren = "fill";pan1_03.alignChildren = "fill";pan1_04.alignChildren = "fill";var my01group = pan1_01.add ("group"); var bt_import = my01group.add ("button", undefined, "Import");var bt_save = my01group.add ("button", undefined, "Save");var bt_getArray = pan1_02.add ("button", undefined, "Get Array");var bt_makerMarkers = pan1_02.add ("button", undefined, "Make Makers");var st_array = pan1_03.add ("statictext", undefined, "Array");var et_array = pan1_03.add ("edittext", [0,0,200,70], "",{multiline: true});var st_arrayDifference = pan1_03.add ("statictext", undefined, "Array Difference");var et_arrayDifference = pan1_03.add ("edittext", [0,0,200,70], "",{multiline: true, readonly: true});var st_changeAmount = pan1_04.add ("statictext", undefined, "Change Amount");var et_changeAmount = pan1_04.add ("edittext", [0,0,100,30], "-.1");var bt_changeArray = pan1_04.add ("button", undefined, "Change Array");function mainScript(){    alert("do cool stuff");    }//scriptsfunction arrayOpt1(){                 app.beginUndoGroup("Ma Array Code - Option 1");                                                         var myComp = app.project.activeItem;                var selectedLayers = myComp.selectedLayers;                                 var mySolidArray=[];                            for (m = 0; m<1; m++)                              {                            var numMarkers = selectedLayers[m].property("Marker").numKeys;                             for (mm = 0; mm<= numMarkers-1; mm++)                                                  {                                                                                                                                                               var diff1 = selectedLayers[m].property("Marker").keyTime(mm+1);                                                                                                mySolidArray.push(diff1);                                                                          }                //myComp.layers.addText(myArray.toString());                          //alert(myArray);                          et_array.text = mySolidArray.toString();                          //alert("donnn");                                }                  app.endUndoGroup();     }function getArrayHere(){     et_array.text ="";     et_arrayDifference.text ="";                    arrayOpt1();    //arrayOpt2();    recalculate();    }function arrayOpt2(){    //~                 app.beginUndoGroup("Ma Array Code - Option 2");//~                      //~                 var myArrayDiff=[];//~                             for (m = 0; m<selectedLayers.length; m++)//~                               {//~                             var numMarkers = selectedLayers[m].property("Marker").numKeys;//~                                                 for (mm = 0; mm<numMarkers-1; mm++)//~                                                   {                                //~                                                 //~                                                 //~                                                 var diff2= selectedLayers[m].property("Marker").keyTime(mm+2)-selectedLayers[m].property("Marker").keyTime(mm+1);//~                                                 //alert(diff);//~                                                 myArrayDiff.push(diff2);//~                                               //~                                                 }//~                                                 myArrayDiff.unshift(selectedLayers[m].property("Marker").keyTime(1));//~                 //myComp.layers.addText(myArray.toString());//~                           //alert(myArray);//~                            et_arrayDifference.text = myArrayDiff;//~                                 }//~                   app.endUndoGroup();    recalculate();        }//scriptsfunction nowMakerMarkers(){try{                                var myCheck=et_array.text.split(",")[0];                if ( myCheck !=null)                                {                                                                        {                                        app.beginUndoGroup("Undo Maker Markers");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                        var myComp = app.project.activeItem;                                        var selectedLayers = myComp.selectedLayers;                                        for (m = 0; m<selectedLayers.length; m++)                                          {                                                    var myMarkerLayer = selectedLayers[m];                                                    var markerStream = myMarkerLayer.property("Marker");                                                                                                        //delete any current markers                                                    for (var i=markerStream.numKeys; i>=1; i--)                                                    {                                                        markerValue = markerStream.keyValue(i);                                                        markerStream.removeKey(i);                                                    }                                                                                                        //add new markers based on the array (Option 1 type)                                                    for (var h=0; h<numDots; h++)                                                    {                                                        var myTimeVal= parseFloat(myTimeArray[h]);                                                                                                                var myMarker = new MarkerValue("");                                                         markerStream.setValueAtTime(myTimeVal, myMarker);                                                    }                                        }                                          app.endUndoGroup();                                          }                                                                                                    }            else            {alert ("Write an array in the Array textbox")}                                                                                                                           }           catch(err)           {alert("You need to define have markers");}                                                }function changeMyarray(){            {                                        app.beginUndoGroup("Undo Change My Array");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                                                                var transformedArray =[];                                        var myComp = app.project.activeItem;                                        var selectedLayers = myComp.selectedLayers;                                        for (m = 0; m<1; m++)                                          {                                                    for (var h=0; h<numDots; h++)                                                    {                                                        var myTimeVal= parseFloat(myTimeArray[h]);                                                        transformedArray.push(myTimeVal+parseFloat(et_changeAmount.text));                                                                                                            }                                                                                                et_array.text= transformedArray;                                        }                                          app.endUndoGroup();                                          }            recalculate();                    }function recalculate(){            //alert("noticed a change");    {                                        app.beginUndoGroup("Undo...");                                        var myTimeArray =et_array.text;                                        //alert(myTimeArray);                                        myTimeArray=myTimeArray.split(",");                                        var numDots =myTimeArray.length;                                                                                var minusArray =[];                                                    for (var hh=0; hh<numDots-1; hh++)                                                    {                                                                                                            var mainDiff= parseFloat(myTimeArray[hh+1])-parseFloat(myTimeArray[hh]);                                                        minusArray.push(mainDiff);                                                                                                                                                               }                                                                                                et_arrayDifference.text= minusArray;                                          app.endUndoGroup();                                          }                        }function myImport(){            var myFile = File.openDialog();//var myFile = File("~/Desktop/test/schedules.json"); myFile.open(); var content = myFile.read(); myFile.close(); et_array.text= content;//~        recalculate();                }function mySave(){try{var dskTop = Folder.desktop;    var dskTop = Folder.desktop;    var dskPth = String(dskTop);    var newSpot = new File(dskPth+"/myArray");    var selectedFolder = newSpot.saveDlg('Select Destination Folder');    var illFilePath = selectedFolder.path;    //alert(illFilePath);    //alert(selectedFolder.name);    var comboname=illFilePath.toString()+"/"+selectedFolder.name.toString()+".txt";    //alert(comboname);        saveTxt(et_array.text,comboname);    }catch(err){}                    }function saveTxt(txt,myPatho){    var saveFile = File(myPatho);    if(saveFile.exists)        saveFile.remove();    saveFile.encoding = "UTF8";    saveFile.open("e", "TEXT", "????");    saveFile.writeln(txt);    saveFile.close();    alert("Saved!")}bt_import.onClick = myImport;bt_save.onClick = mySave;bt_getArray.onClick = getArrayHere;bt_makerMarkers.onClick = nowMakerMarkers;bt_changeArray.onClick = changeMyarray;et_array.onChange = recalculate;                     // DropDownList default selection                    //myPanel.grp.myDropDownList.selection = 2;//Item index starts at 0                      //Setup panel sizing and make panel resizable                    myPanel.layout.layout(true);                    //myPanel.pan1.minimumSize = myPanel.pan1.size;                    myPanel.layout.resize();                    myPanel.onResizing = myPanel.onResize = function () {this.layout.resize();}                     return myPanel;          }            var myScriptPal = myScript_buildUI(thisObj);            if ((myScriptPal != null) && (myScriptPal instanceof Window)) {                    myScriptPal.center();                    myScriptPal.show();                    }          }          myScript(this);} 